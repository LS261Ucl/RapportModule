@page "/Login"
@layout CenteredCardLayout
@using Microsoft.AspNetCore.WebUtilities
@using Rapport.Shared.Dto_er.User
@using System.Security.Claims
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<EditForm Model="user" OnValidSubmit="ValidateUser">
    <DataAnnotationsValidator />
    <div>
            <br /><br /><br /><br /><br />
    </div>
    <div>
        <h3 style="font-weight: bold; color:royalblue">Login</h3>
    </div>
    <div>
        <br />
    </div>
      <div class="col-12 row">
        <input class="form-control col-12" @bind="user.Email" placeholder="email address" />
    </div>
    <br />
    <div class="col-12 row">
        <input type="password" class="form-control col-12" @bind="user.Password" placeholder="password" />
    </div>
    <br />
    <div class="col-12 row align-content-center">
        <span class="col-12"></span>
        <input type="submit" class="form-control col-6 btn btn-primary" value="Login" />
        <a href="/register" class="col-md-6">Opret</a>
    </div>
    <div class="col-12 align-content-end">
     <div class="col-4" @onclick="@ChangePassword">Ændre password</div>

    </div>
    <br />
    <div class="col-12 row" style="text-align:left; font-weight:bold">
        <span class="col-12">@errorMessage</span>
    </div>
    
</EditForm>


@code {
    private LoginDto user = new LoginDto();
    ClaimsPrincipal? claimsPrincipal;

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }

    private string errorMessage = string.Empty;

    private string returnUrl = string.Empty;

    protected override async void OnInitialized()
    {
        user = new LoginDto();

        claimsPrincipal = (await AuthenticationState).User;

        if(!claimsPrincipal.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/index");
        }

    }

    private async Task<bool> ValidateUser()
    {
        //Assume that user is valid
        //call an Api

        var returnedUser = await AuthService.Login(user);

        if(returnedUser.Email != null)
        {
            await ((CustomAuthStateProvider)AuthenticationStateProvider).GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/index");
        }
        else
        {
            errorMessage = "Brugernavn eller password er ikke korrekt";
        }

        return await Task.FromResult(true);
    }

    private async Task RegisterUser()
    {
        NavigationManager.NavigateTo("register");
    }

    private async Task ChangePassword()
    {
        NavigationManager.NavigateTo("profile");
    }
}